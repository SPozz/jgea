findall((Leaf1,Leaf2,Root,Edg1,Edg2) , ((type(Leaf1,constant);type(Leaf1,input)),edge(Leaf1,Root,Edg1),dif(Leaf1,Leaf2), edge(Leaf2,Root,Edg2),(type(Leaf2,constant);type(Leaf2,input))) ,Leaves), random_member((L1,L2,S,Edge1,Edge2),Leaves), retract(edge(L1,S,Edge1)), retract(edge_id(Edge1)), retract(edge(L2,S,Edge2)), retract(edge_id(Edge2)), retract(node_id(L1)), retract(node_id(L2)), retract(start(L1,0)), retract(start(L2,0)), retract(value(L1,_)), retract(value(L2,_)), retract(type(L1,_)), retract(type(L2,_)), n_input(InpMax), retract(type(S,_)), retract(value(S,_)), ( maybe ->assert(type(S,input)), random(0, InpMax, InpVal), assert(value(S,InpVal));assert(type(S,constant)), random(0.000001,2.0,V1Val), assert(value(S,V1Val)) ).